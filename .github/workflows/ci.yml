name: Strojenie i walidacja regulator√≥w

on:
  workflow_dispatch:
    inputs:
      regulator:
        description: 'Wybierz regulator do przetestowania'
        required: true
        default: 'regulator_pid'
        type: choice
        options:
          - regulator_pid
          - regulator_pi
          - regulator_dwupolozeniowy

jobs:
  # -----------------------------------------------------
  # 1Ô∏è‚É£ Strojenie regulator√≥w
  # -----------------------------------------------------
  tune:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Strojenie regulator√≥w (tylko etap strojenia)
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=strojenie \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test python src/uruchom_symulacje.py

      - name: Upload tuning results
        uses: actions/upload-artifact@v3
        with:
          name: tuning-results
          path: |
            wyniki/parametry_*.json
            wyniki/raport_strojenie_*.html
            wyniki/strojenie_*.png

  # -----------------------------------------------------
  # 2Ô∏è‚É£ Walidacja modeli (ka≈ºdy w osobnym kroku)
  # -----------------------------------------------------

  validate_zbiornik:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Download tuning results
        uses: actions/download-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/
      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .
      - name: Walidacja modelu zbiornik_1rz
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=walidacja \
            -e MODEL=zbiornik_1rz \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test python src/uruchom_symulacje.py || echo "FAIL" > result.txt
      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-zbiornik
          path: wyniki/

  validate_dwa_zbiorniki:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Download tuning results
        uses: actions/download-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/
      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .
      - name: Walidacja modelu dwa_zbiorniki
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=walidacja \
            -e MODEL=dwa_zbiorniki \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test python src/uruchom_symulacje.py || echo "FAIL" > result.txt
      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-dwa
          path: wyniki/

  validate_wahadlo:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Download tuning results
        uses: actions/download-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/
      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .
      - name: Walidacja modelu wahadlo_odwrocone
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e DT=0.005 \
            -e TRYB=walidacja \
            -e MODEL=wahadlo_odwrocone \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test python src/uruchom_symulacje.py || echo "FAIL" > result.txt
      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-wahadlo
          path: wyniki/

  # -----------------------------------------------------
  # 3Ô∏è‚É£ Podsumowanie i generacja raportu
  # -----------------------------------------------------
  summary:
    runs-on: ubuntu-latest
    needs: [validate_zbiornik, validate_dwa_zbiorniki, validate_wahadlo]
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Download all validation results
        uses: actions/download-artifact@v4
        with:
          pattern: wyniki-*
          merge-multiple: true
          path: wyniki/

      - name: Move all reports to main wyniki folder
        run: |
          echo "Kopiujƒô wyniki z podkatalog√≥w..."
          find wyniki -type f -name "*.json" -exec mv {} wyniki/ \; || true
          find wyniki -type f -name "*.png" -exec mv {} wyniki/ \; || true
          ls -R wyniki

      - name: Generuj raport zbiorczy
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test python src/ocena_metod.py || echo "‚ö†Ô∏è Brak raport√≥w do oceny w katalogu: wyniki"

      - name: Sprawd≈∫ wyniki i zdecyduj o statusie
        run: |
          cd wyniki
          if [ ! -f raport.html ]; then
            echo "Brak raportu HTML ‚Äî prawdopodobnie brak wynik√≥w walidacji"
            exit 1
          fi

          PASS_COUNT=$(grep -o "‚úÖ" raport.html | wc -l)
          if [ "$PASS_COUNT" -eq 0 ]; then
            echo "‚ùå ≈ªaden model nie spe≈Çni≈Ç prog√≥w jako≈õci ‚Äî pipeline FAIL"
            exit 1
          else
            echo "‚úÖ Walidacja pozytywna ‚Äî pipeline OK ($PASS_COUNT pozytywnych test√≥w)"
          fi

      - name: Upload raportu ko≈Ñcowego
        uses: actions/upload-artifact@v4
        with:
          name: raport_${{ github.event.inputs.regulator }}
          path: wyniki/

  # -----------------------------------------------------
  # 4Ô∏è‚É£ Wdro≈ºenie regulator√≥w (GitOps)
  # -----------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: summary
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Download validation summary
        uses: actions/download-artifact@v4
        with:
          name: raport_${{ github.event.inputs.regulator }}
          path: wyniki/

      - name: Read passed models
        id: read_models
        run: |
          echo "üìÑ Odczytujƒô listƒô modeli..."
          if [ ! -f wyniki/passed_models.txt ]; then
            echo "‚ö†Ô∏è Brak pliku wyniki/passed_models.txt"
            echo "has_models=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Modele do wdro≈ºenia:"
            cat wyniki/passed_models.txt
            MODELS=$(cat wyniki/passed_models.txt | tr '\n' ' ' | xargs)
            echo "models=$MODELS" >> $GITHUB_OUTPUT
            echo "has_models=true" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        if: steps.read_models.outputs.has_models == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images for passed models
        if: steps.read_models.outputs.has_models == 'true'
        run: |
          for MODEL in ${{ steps.read_models.outputs.models }}; do
            SAFE_MODEL=$(echo "$MODEL" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            IMAGE="ghcr.io/${OWNER}/${SAFE_MODEL}-regulator:latest"
            echo "üöÄ Budujƒô i wysy≈Çam obraz: $IMAGE"
            docker build -t "$IMAGE" -f kontener/Dockerfile .
            docker push "$IMAGE"
          done

      - name: Update GitOps repository
        if: steps.read_models.outputs.has_models == 'true'
        env:
          GITOPS_REPO: "https://github.com/JakubZasadni/cl-gitops-regulatory.git"
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          set -e
          echo "üß© Klonujƒô repozytorium GitOps..."
          git clone https://${GH_TOKEN}@github.com/JakubZasadni/cl-gitops-regulatory.git gitops
          cd gitops

          for MODEL in ${{ steps.read_models.outputs.models }}; do
            SAFE_MODEL=$(echo "$MODEL" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            echo "üîß Aktualizujƒô manifest dla modelu: $SAFE_MODEL"
            yq -i ".spec.template.spec.containers[0].image = \"ghcr.io/${{ github.repository_owner }}/${SAFE_MODEL}-regulator:latest\"" kustomize/apps/${SAFE_MODEL}/base/deployment.yml || echo "‚ö†Ô∏è Brak pliku deployment.yml dla $SAFE_MODEL"
          done

          git config user.email "ci@github"
          git config user.name "GitHub Actions"

          echo "üîç Sprawdzam, czy sƒÖ zmiany..."
          if git diff --quiet; then
            echo "‚úÖ Brak zmian do zapisania ‚Äî pomijam commit."
          else
            echo "üì¶ Commitujƒô zmiany..."
            git add .
            git commit -m "auto-deploy: updated images for passed models"
            git push origin main || (echo '‚ùå Git push failed, sprawd≈∫ uprawnienia GH_TOKEN' && exit 1)
          fi
